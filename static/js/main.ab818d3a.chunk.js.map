{"version":3,"sources":["utils/ids.ts","utils/stakeAccounts.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["STAKE_PROGRAM_ID","PublicKey","findStakeAccountMetas","connection","walletAddress","a","newStakeAccountMetas","i","seed","createWithSeed","stakeAccountPublicKey","console","log","toBase58","getAccountInfo","accountInfo","getParsedAccountInfo","context","value","data","parsed","stakeAccount","push","address","balance","lamports","LAMPORTS_PER_SOL","demoStakeAccounts","Connection","clusterApiUrl","App","useState","publicKey","setPublicKey","errorInfo","setErrorInfo","stakeAccounts","setStakeAccounts","AppBar","position","Toolbar","Typography","variant","color","noWrap","style","flexGrow","display","gap","Button","disabled","Menu","anchorOrigin","vertical","horizontal","transformOrigin","open","MenuItem","Container","maxWidth","TextField","id","label","error","helperText","onChange","e","target","Sync","List","map","ListItem","href","OpenInNew","ListItemText","primary","secondary","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab818d3a.chunk.js","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\n\nexport const STAKE_PROGRAM_ID = new PublicKey('Stake11111111111111111111111111111111111111');","import { Connection, LAMPORTS_PER_SOL, PublicKey } from \"@solana/web3.js\";\nimport { StakeAccount } from \"../validators/accounts/accounts\";\nimport { STAKE_PROGRAM_ID } from \"./ids\";\n\nexport interface StakeAccountMeta {\n    address: PublicKey;\n    seed: string;\n    balance: number;\n    stakeAccount?: StakeAccount;\n}\n\nexport async function findStakeAccountMetas(connection: Connection, walletAddress: PublicKey): Promise<StakeAccountMeta[]> {\n    let newStakeAccountMetas: StakeAccountMeta[] = [];\n\n    // We discover account with the solfalre seed only for now\n    for(let i = 0;i<8;i++) {\n      const seed = `stake:${i}`;\n\n      const stakeAccountPublicKey = await PublicKey.createWithSeed(walletAddress, seed, STAKE_PROGRAM_ID);\n      console.log(stakeAccountPublicKey.toBase58());\n      const accountInfo = await connection.getAccountInfo(stakeAccountPublicKey);\n      const {context, value} = await connection.getParsedAccountInfo(stakeAccountPublicKey);\n\n      if (value?.data && 'parsed' in value?.data) {\n        console.log(value?.data.parsed);\n        const stakeAccount = value?.data.parsed as StakeAccount;\n\n        newStakeAccountMetas.push({\n          address: stakeAccountPublicKey,\n          seed,\n          balance: accountInfo?.lamports ? accountInfo?.lamports / LAMPORTS_PER_SOL : 0,\n          stakeAccount\n        });\n      }\n    }\n\n    return newStakeAccountMetas;\n}","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { AppBar, Button, Container, IconButton, Link as L2, List, ListItem, ListItemText, Menu, MenuItem, TextField, Toolbar, Typography } from '@material-ui/core';\nimport { clusterApiUrl, Connection, LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js';\nimport { OpenInNew, Sync } from '@material-ui/icons';\nimport { STAKE_PROGRAM_ID } from './utils/ids';\nimport { findStakeAccountMetas, StakeAccountMeta } from './utils/stakeAccounts';\n\nconst demoStakeAccounts: StakeAccountMeta[] = [\n  {address: new PublicKey(0), seed: 'stake:0', balance: 123.23},\n  {address: new PublicKey(0), seed: 'stake:1', balance: 221.0},\n  {address: new PublicKey(0), seed: 'stake:2', balance: 1}\n];\n\nasync function getStakeAccounts(basePubKey: PublicKey, index: number) {\n  PublicKey.createWithSeed(basePubKey, index.toString(), STAKE_PROGRAM_ID);\n}\n\nconst connection = new Connection(clusterApiUrl('mainnet-beta'))\n\nfunction App() {\n  const [publicKey, setPublicKey] = useState<PublicKey | null>(null);\n  const [errorInfo, setErrorInfo] = useState<string | null>(null);\n  const [stakeAccounts, setStakeAccounts] = useState<StakeAccountMeta[]>(demoStakeAccounts);\n  \n  return (\n    <>\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            Solstake\n          </Typography>\n        <div style={{flexGrow: 1}}></div>\n        <div style={{display: 'flex', gap: '10px'}}>\n          <Button variant=\"contained\" disabled>Demo</Button>\n          <Button variant=\"contained\">Connect wallet</Button>\n        </div>\n        </Toolbar>\n      </AppBar>\n      <Menu\n          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n          transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n          open={false}\n      >\n          <MenuItem>Demo</MenuItem>\n      </Menu>\n      <main>\n        <Container maxWidth=\"sm\">\n          <TextField\n            id=\"standard-basic\"\n            label=\"Public key\"\n            value={publicKey?.toBase58()}\n            error={errorInfo !== null}\n            helperText={errorInfo}\n            onChange={async function(e) {\n              let walletAddress: PublicKey | null;\n              try {\n                walletAddress = new PublicKey(e.target.value);\n              }\n              catch {\n                console.log(`${e.target.value} is not a valid PublicKey input`);\n\n                setErrorInfo('Invalid public key');\n                setPublicKey(null);\n                setStakeAccounts([]);\n                return;\n              }\n              \n              setErrorInfo(null);\n              setPublicKey(walletAddress);\n              setStakeAccounts([]);\n              setStakeAccounts(await findStakeAccountMetas(connection, walletAddress));\n            }}\n          />\n          <Button>\n            <Sync />\n          </Button>\n          <List>\n            {stakeAccounts.map(stakeAccount => (\n              <ListItem>\n                <L2 href={`https://explorer.solana.com/address/${stakeAccount.address.toBase58()}`}>\n                  <OpenInNew />\n                </L2>\n                <ListItemText\n                  primary={`${stakeAccount.seed}`}\n                  secondary={`Balance: ${stakeAccount.balance} SOL`} \n                >\n                </ListItemText>\n              </ListItem>\n            ))}\n          </List>\n        </Container>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}