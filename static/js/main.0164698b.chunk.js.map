{"version":3,"sources":["utils/ids.ts","utils/stakeAccounts.ts","components/StakeAccount.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["STAKE_PROGRAM_ID","PublicKey","findStakeAccountMetas","connection","walletAddress","a","newStakeAccountMetas","i","seed","createWithSeed","stakeAccountPublicKey","console","log","toBase58","getAccountInfo","accountInfo","getParsedAccountInfo","value","data","parsed","stakeAccount","push","address","balance","lamports","LAMPORTS_PER_SOL","inflationRewards","getEpochInfo","epochInfo","minEpoch","Math","min","map","meta","parseInt","info","stake","delegation","activationEpoch","epoch","getInflationReward","accountMeta","inflationRewardList","forEach","inflationReward","index","StakeAccountCard","stakeAccountMeta","useState","open","setOpen","Box","m","Card","variant","CardContent","Typography","component","gutterBottom","color","type","voter","Button","onClick","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","List","disablePadding","ListItem","style","paddingLeft","ListItemText","primary","amount","CardActions","Link","href","OpenInNew","demoStakeAccounts","Connection","clusterApiUrl","App","publicKey","setPublicKey","loading","setLoading","errorInfo","setErrorInfo","stakeAccounts","setStakeAccounts","pk","useEffect","fetchStakeAccounts","AppBar","position","Toolbar","noWrap","flexGrow","display","gap","disabled","Menu","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","Container","maxWidth","TextField","id","fullWidth","label","error","helperText","onChange","e","target","Skeleton","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0164698b.chunk.js","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\n\nexport const STAKE_PROGRAM_ID = new PublicKey('Stake11111111111111111111111111111111111111');","import { Connection, InflationReward, LAMPORTS_PER_SOL, PublicKey } from \"@solana/web3.js\";\nimport { StakeAccount } from \"../validators/accounts/accounts\";\nimport { STAKE_PROGRAM_ID } from \"./ids\";\n\nexport interface StakeAccountMeta {\n    address: PublicKey;\n    seed: string;\n    balance: number;\n    stakeAccount?: StakeAccount;\n    inflationRewards: InflationReward[]\n}\n\nexport async function findStakeAccountMetas(connection: Connection, walletAddress: PublicKey): Promise<StakeAccountMeta[]> {\n    let newStakeAccountMetas: StakeAccountMeta[] = [];\n\n    // We discover account with the solflare seed only for now\n    for(let i = 0;i<8;i++) {\n      const seed = `stake:${i}`;\n\n      const stakeAccountPublicKey = await PublicKey.createWithSeed(walletAddress, seed, STAKE_PROGRAM_ID);\n      console.log(stakeAccountPublicKey.toBase58());\n      const accountInfo = await connection.getAccountInfo(stakeAccountPublicKey);\n      const {value} = await connection.getParsedAccountInfo(stakeAccountPublicKey);\n\n      if (value?.data && 'parsed' in value?.data) {\n        console.log(value?.data.parsed);\n        const stakeAccount = value?.data.parsed as StakeAccount;\n\n        newStakeAccountMetas.push({\n          address: stakeAccountPublicKey,\n          seed,\n          balance: accountInfo?.lamports ? accountInfo?.lamports / LAMPORTS_PER_SOL : 0,\n          stakeAccount,\n          inflationRewards: []\n        });\n      }\n    }\n\n    const epochInfo = await connection.getEpochInfo('singleGossip');\n\n    const minEpoch = Math.min(\n      ...newStakeAccountMetas.map(meta => {\n        return parseInt(meta.stakeAccount?.info.stake?.delegation.activationEpoch as unknown as string ?? '1000'); // TODO: Cleaner way to get the min epoch1\n      })\n    );\n\n    console.log(`minEpoch: ${minEpoch}`);\n    for(let epoch = epochInfo.epoch - 1;epoch > minEpoch;epoch--) {\n      const inflationRewardList = await connection.getInflationReward(\n        newStakeAccountMetas.map(accountMeta => accountMeta.address),\n        epoch,\n        'singleGossip'\n      );\n      console.log(epoch)\n      console.log(inflationRewardList);\n\n      inflationRewardList.forEach((inflationReward, index) => {\n        if (inflationReward) {\n          newStakeAccountMetas[index].inflationRewards.push(inflationReward)\n        }\n      });\n    }\n\n    return newStakeAccountMetas;\n}","import { Box, Button, Card, CardActions, CardContent, Collapse, Link, List, ListItem, ListItemText, Typography } from \"@material-ui/core\";\nimport { ExpandLess, ExpandMore, OpenInNew } from \"@material-ui/icons\";\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport React, { useState } from \"react\";\nimport { StakeAccountMeta } from \"../utils/stakeAccounts\";\n\nexport function StakeAccountCard({stakeAccountMeta}: {stakeAccountMeta: StakeAccountMeta}) {\n    const [open, setOpen] = useState(false);\n    \n    return (\n        <Box m={0.5}>\n            <Card variant=\"outlined\">\n            <CardContent>\n                <Typography component=\"h1\" gutterBottom>\n                {`${stakeAccountMeta.seed}`}\n                </Typography>\n                <Typography variant=\"h6\" component=\"h2\">\n                {`Balance: ${stakeAccountMeta.balance} SOL`} \n                </Typography>\n                <Typography color=\"textSecondary\">\n                { stakeAccountMeta.stakeAccount ? `Type: ${stakeAccountMeta.stakeAccount.type}, activation epoch: ${stakeAccountMeta.stakeAccount.info.stake?.delegation.activationEpoch}, voter: ${stakeAccountMeta.stakeAccount.info.stake?.delegation.voter}` : 'No data' }\n                </Typography>\n\n                <Button onClick={() => setOpen(!open)}>\n                Rewards\n                {open ? <ExpandLess /> : <ExpandMore />}\n                </Button>\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                <List component=\"div\" disablePadding>\n                    {stakeAccountMeta.inflationRewards.map(inflationReward => (\n                    <ListItem style={{paddingLeft: 4}}>\n                        <ListItemText primary={`Epoch: ${inflationReward.epoch}, reward: ${inflationReward.amount / LAMPORTS_PER_SOL} SOL`} />\n                    </ListItem>\n                    ))}\n                </List>\n                </Collapse>\n\n            </CardContent>\n            <CardActions>\n                <Link href={`https://explorer.solana.com/address/${stakeAccountMeta.address.toBase58()}`}>\n                    <OpenInNew />\n                </Link>\n            </CardActions>\n            </Card>\n        </Box>)\n}","import React, { useEffect, useState } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport { AppBar, Button, Container, Menu, MenuItem, TextField, Toolbar, Typography } from '@material-ui/core';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { clusterApiUrl, Connection, LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js';\nimport { findStakeAccountMetas, StakeAccountMeta } from './utils/stakeAccounts';\nimport { StakeAccountCard } from './components/StakeAccount';\n\nconst demoStakeAccounts: StakeAccountMeta[] = [\n  {address: new PublicKey(0), seed: 'stake:0', balance: 123.23, inflationRewards: []},\n  {address: new PublicKey(0), seed: 'stake:1', balance: 221.0, inflationRewards: []},\n  {address: new PublicKey(0), seed: 'stake:2', balance: 1, inflationRewards: []}\n];\n\nconst connection = new Connection(clusterApiUrl('mainnet-beta'))\n\nfunction App() {\n  const [publicKey, setPublicKey] = useState<PublicKey | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [errorInfo, setErrorInfo] = useState<string | null>(null);\n  const [stakeAccounts, setStakeAccounts] = useState<StakeAccountMeta[]>(demoStakeAccounts);\n\n  async function fetchStakeAccounts(pk: PublicKey) {\n    setStakeAccounts(await findStakeAccountMetas(connection, pk));\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    setStakeAccounts([]);\n    if (publicKey !== null) {\n      setLoading(true);\n      fetchStakeAccounts(publicKey);\n    }\n  }, [publicKey]);\n  \n  return (\n    <>\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            Solstake\n          </Typography>\n        <div style={{flexGrow: 1}}></div>\n        <div style={{display: 'flex', gap: '10px'}}>\n          <Button variant=\"contained\" disabled>Demo</Button>\n          <Button variant=\"contained\">Connect wallet</Button>\n        </div>\n        </Toolbar>\n      </AppBar>\n      <Menu\n          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n          transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n          open={false}\n      >\n          <MenuItem>Demo</MenuItem>\n      </Menu>\n      <main>\n        <Container maxWidth=\"md\">\n          <TextField\n            id=\"standard-basic\"\n            fullWidth={true}\n            label=\"Wallet public key\"\n            value={publicKey?.toBase58()}\n            error={errorInfo !== null}\n            helperText={errorInfo}\n            onChange={async function(e) {\n              try {\n                const walletAddress = new PublicKey(e.target.value);\n                setErrorInfo(null);\n                setPublicKey(walletAddress);\n              }\n              catch {\n                console.log(`${e.target.value} is not a valid PublicKey input`);\n\n                setErrorInfo('Invalid public key');\n                setPublicKey(null);\n              }\n            }}\n          />\n          <Container>\n          {loading ? (<Skeleton height={200}></Skeleton>): stakeAccounts.map(\n            meta => (<StakeAccountCard stakeAccountMeta={meta} />))}\n          </Container>\n        </Container>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}